name: copy
on:
  workflow_dispatch:
    inputs:
      workflow:
        type: string
        required: true
      releaseId:
        type: string
        required: false
        default: ""
      projectId:
        type: string
        required: false
        default: ""
      region:
        type: string
        required: false
        default: "DIGITAL"
      csild:
        type: string
        required: false
        default: ""

      # Bloques anidados como JSON string
      sourceCode_json:
        type: string
        required: false
        default: |
          {"projectStream":"master","projectModule":"","repositoryInstance":"bitbucket"}
      build_json:
        type: string
        required: false
        default: |
          {"dependencyResolutionRepo":"artifactory","printVerboseLog":false,"deployLibraries":false,"pomFileLocation":".","packageIncludes":"","jenkinsAdditionalFolder":"content","svnProfiles":"","tibcoBW":{"stpVersion":""},"deployToPkgArchive":true}
      staticCodeAnalysis_json:
        type: string
        required: false
        default: |
          {"blackDuck":{"RELEASENAME":"","BD_ARCHER_COMPONENT":"","SCAN_WF":"","BD_SOURCE_SYSTEM":""},
           "checkmarx":{"CHECKMARX_CONFIG_CMPNAME":"","CHECKMARX_ENV":"","SCAN_WF":"","CHECKMARX_CX_TEAMNAME":"","CHECKMARX_ARCHER_BASE_CMPNAME":"","CHECKMARX_TYPE_WF_SCAN":"","RELEASENAME":""},
           "sonarQube":{"sonarExcludes":"","sonarLanguage":""},
           "appscan":{"archerRecord":""}}
      threshold_json:
        type: string
        required: false
        default: |
          {"unitTestSuccessDensity":0,"securityRating":0,"techDebtRatio":0,"reliabilityRating":0,"unitTestCoverage":0}
      deploy_json:
        type: string
        required: false
        default: |
          {"NA":{"rlmExecute":false,"rlmEnvironment":"","rlmParams":"","rlmUIParams":"","rlmTemplate":""},
           "SWSDEVTEST":{"rlmExecute":true,"rlmEnvironment":"","rlmParams":"","rlmUIParams":"","rlmTemplate":""}}

      postBuildDeployEnv:
        type: string
        required: false
        default: ""

jobs:
  run-copy:
    runs-on: ubuntu-latest
    env:
      # escala simple
      WORKFLOW: ${{ inputs.workflow }}
      RELEASE_ID: ${{ inputs.releaseId }}
      PROJECT_ID: ${{ inputs.projectId }}
      REGION: ${{ inputs.region }}
      CSILD: ${{ inputs.csild }}

      # parseo JSON a nivel de env cuando conviene (campos más usados)
      SOURCE_PROJECT_STREAM: ${{ fromJSON(inputs.sourceCode_json).projectStream }}
      SOURCE_PROJECT_MODULE: ${{ fromJSON(inputs.sourceCode_json).projectModule }}
      SOURCE_REPO_INSTANCE: ${{ fromJSON(inputs.sourceCode_json).repositoryInstance }}

      BUILD_VERBOSE: ${{ fromJSON(inputs.build_json).printVerboseLog }}
      BUILD_DEPLOY_LIBS: ${{ fromJSON(inputs.build_json).deployLibraries }}
      BUILD_POM: ${{ fromJSON(inputs.build_json).pomFileLocation }}
      BUILD_DEPLOY_TO_ARCHIVE: ${{ fromJSON(inputs.build_json).deployToPkgArchive }}

      # thresholds
      THRESH_UT_SUCCESS: ${{ fromJSON(inputs.threshold_json).unitTestSuccessDensity }}
      THRESH_SEC: ${{ fromJSON(inputs.threshold_json).securityRating }}
      THRESH_TD: ${{ fromJSON(inputs.threshold_json).techDebtRatio }}
      THRESH_REL: ${{ fromJSON(inputs.threshold_json).reliabilityRating }}
      THRESH_COV: ${{ fromJSON(inputs.threshold_json).unitTestCoverage }}

      POST_BUILD_DEPLOY_ENV: ${{ inputs.postBuildDeployEnv }}

    steps:
      - uses: actions/checkout@v4

      - name: Mostrar parámetros parseados
        shell: bash
        run: |
          set -Eeuo pipefail
          echo "Workflow: $WORKFLOW"
          echo "Release: $RELEASE_ID, Project: $PROJECT_ID, Region: $REGION, CSILD: $CSILD"
          echo "Source => stream=$SOURCE_PROJECT_STREAM module=$SOURCE_PROJECT_MODULE repo=$SOURCE_REPO_INSTANCE"
          echo "Build => verbose=$BUILD_VERBOSE deployLibs=$BUILD_DEPLOY_LIBS pom=$BUILD_POM toArchive=$BUILD_DEPLOY_TO_ARCHIVE"
          echo "Thresholds => UT%=$THRESH_UT_SUCCESS SEC=$THRESH_SEC TD=$THRESH_TD REL=$THRESH_REL COV=$THRESH_COV"
          echo "PostBuildDeployEnv=$POST_BUILD_DEPLOY_ENV"

      - name: (Ejemplo) Resolver dependencias
        if: ${{ fromJSON(inputs.build_json).dependencyResolutionRepo != '' }}
        run: |
          echo "Usando repo de dependencias: ${{ fromJSON(inputs.build_json).dependencyResolutionRepo }}"
          # aquí irían tus comandos de build (maven/gradle/npm, etc.)

      - name: (Ejemplo) Análisis SonarQube (si aplica)
        if: ${{ fromJSON(inputs.staticCodeAnalysis_json).sonarQube.sonarLanguage != '' }}
        run: |
          echo "Ejecutando SonarQube con lenguaje=${{ fromJSON(inputs.staticCodeAnalysis_json).sonarQube.sonarLanguage }}"
          echo "Excluye=${{ fromJSON(inputs.staticCodeAnalysis_json).sonarQube.sonarExcludes }}"
          # sonar-scanner ... (parámetros reales aquí)

      - name: (Ejemplo) Deploy a SWSDEVTEST
        if: ${{ fromJSON(inputs.deploy_json).SWSDEVTEST.rlmExecute == true }}
        run: |
          echo "Desplegando a SWSDEVTEST"
          echo "Env=${{ fromJSON(inputs.deploy_json).SWSDEVTEST.rlmEnvironment }}"
          echo "Params=${{ fromJSON(inputs.deploy_json).SWSDEVTEST.rlmParams }}"
          echo "UIParams=${{ fromJSON(inputs.deploy_json).SWSDEVTEST.rlmUIParams }}"
          echo "Template=${{ fromJSON(inputs.deploy_json).SWSDEVTEST.rlmTemplate }}"
          # comandos reales de despliegue aquí
